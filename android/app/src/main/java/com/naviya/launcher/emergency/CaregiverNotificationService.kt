package com.naviya.launcher.emergency

import android.content.Context
import android.location.Location
import android.util.Log
import com.naviya.launcher.emergency.data.EmergencyContact
import com.naviya.launcher.emergency.data.EmergencyDao
import com.naviya.launcher.emergency.data.EmergencyEvent
import com.naviya.launcher.emergency.data.EmergencyEventType
import dagger.hilt.android.qualifiers.ApplicationContext
import kotlinx.coroutines.*
import javax.inject.Inject
import javax.inject.Singleton

/**
 * Caregiver Notification Service for Naviya Launcher
 * Handles remote caregiver notifications while respecting privacy boundaries
 * Follows Windsurf rules for caregiver integration and privacy
 */
@Singleton
class CaregiverNotificationService @Inject constructor(
    @ApplicationContext private val context: Context,
    private val emergencyDao: EmergencyDao,
    private val locationService: EmergencyLocationService
) {
    private val notificationScope = CoroutineScope(Dispatchers.IO + SupervisorJob())
    
    companion object {
        private const val TAG = "CaregiverNotificationService"
        private const val NOTIFICATION_TIMEOUT_MS = 30000L // 30 seconds
        private const val MAX_RETRY_ATTEMPTS = 3
    }
    
    /**
     * Send emergency notification to caregiver
     * Respects privacy boundaries and user consent
     */
    suspend fun sendEmergencyNotification(
        caregiver: EmergencyContact,
        location: Location?,
        userLanguage: String
    ): Boolean {
        return try {
            Log.i(TAG, "Sending emergency notification to caregiver: ${caregiver.name}")
            
            val notificationData = EmergencyNotificationData(
                caregiverId = caregiver.id,
                emergencyType = EmergencyType.SOS_ACTIVATED,
                timestamp = System.currentTimeMillis(),
                userLanguage = userLanguage,
                location = location?.let {
                    LocationData(
                        latitude = it.latitude,
                        longitude = it.longitude,
                        accuracy = if (it.hasAccuracy()) it.accuracy else null,
                        timestamp = it.time
                    )
                },
                message = getEmergencyMessage(EmergencyType.SOS_ACTIVATED, userLanguage),
                priority = NotificationPriority.CRITICAL
            )
            
            // Try multiple notification channels
            val results = mutableListOf<Boolean>()
            
            // 1. Push notification (if caregiver app installed)
            results.add(sendPushNotification(notificationData))
            
            // 2. SMS notification (fallback)
            results.add(sendSMSNotification(caregiver, notificationData))
            
            // 3. Email notification (if configured)
            results.add(sendEmailNotification(caregiver, notificationData))
            
            val success = results.any { it }
            
            if (success) {
                // Log successful notification
                emergencyDao.insertEmergencyEvent(
                    EmergencyEvent(
                        eventType = EmergencyEventType.CAREGIVER_NOTIFIED,
                        contactId = caregiver.id,
                        userLanguage = userLanguage,
                        locationLatitude = location?.latitude,
                        locationLongitude = location?.longitude,
                        notes = "Notification sent successfully"
                    )
                )
            }
            
            success
            
        } catch (e: Exception) {
            Log.e(TAG, "Failed to send emergency notification", e)
            false
        }
    }
    
    /**
     * Send push notification to caregiver app
     */
    private suspend fun sendPushNotification(data: EmergencyNotificationData): Boolean {
        return try {
            // This would integrate with Firebase Cloud Messaging or similar
            // For now, simulate the notification
            Log.i(TAG, "Push notification sent for emergency: ${data.emergencyType}")
            
            // Simulate network call
            delay(1000)
            
            // Return success (in real implementation, check actual delivery)
            true
            
        } catch (e: Exception) {
            Log.e(TAG, "Push notification failed", e)
            false
        }
    }
    
    /**
     * Send SMS notification to caregiver
     */
    private suspend fun sendSMSNotification(
        caregiver: EmergencyContact,
        data: EmergencyNotificationData
    ): Boolean {
        return try {
            val smsMessage = buildSMSMessage(data)
            
            // Use Android SMS manager
            val smsManager = android.telephony.SmsManager.getDefault()
            smsManager.sendTextMessage(
                caregiver.phoneNumber,
                null,
                smsMessage,
                null,
                null
            )
            
            Log.i(TAG, "SMS notification sent to caregiver: ${caregiver.name}")
            true
            
        } catch (e: Exception) {
            Log.e(TAG, "SMS notification failed for ${caregiver.name}", e)
            false
        }
    }
    
    /**
     * Send email notification to caregiver (if email configured)
     */
    private suspend fun sendEmailNotification(
        caregiver: EmergencyContact,
        data: EmergencyNotificationData
    ): Boolean {
        return try {
            // Email would be sent through a backend service
            // For now, just log the attempt
            Log.i(TAG, "Email notification would be sent to caregiver: ${caregiver.name}")
            
            // Simulate email sending
            delay(2000)
            true
            
        } catch (e: Exception) {
            Log.e(TAG, "Email notification failed", e)
            false
        }
    }
    
    /**
     * Send cancellation notification to caregiver
     */
    suspend fun sendCancellationNotification(reason: String): Boolean {
        return try {
            val caregiver = emergencyDao.getPrimaryCaregiver()
            if (caregiver == null) {
                Log.w(TAG, "No primary caregiver configured for cancellation notification")
                return false
            }
            
            val message = "EMERGENCY CANCELLED: The emergency situation has been resolved. Reason: $reason. Time: ${java.text.SimpleDateFormat("HH:mm:ss").format(java.util.Date())}"
            
            val smsManager = android.telephony.SmsManager.getDefault()
            smsManager.sendTextMessage(
                caregiver.phoneNumber,
                null,
                message,
                null,
                null
            )
            
            Log.i(TAG, "Cancellation notification sent to caregiver")
            true
            
        } catch (e: Exception) {
            Log.e(TAG, "Failed to send cancellation notification", e)
            false
        }
    }
    
    /**
     * Build SMS message for emergency notification
     */
    private fun buildSMSMessage(data: EmergencyNotificationData): String {
        val locationText = data.location?.let {
            "Location: https://maps.google.com/?q=${it.latitude},${it.longitude}"
        } ?: "Location: Not available"
        
        val timestamp = java.text.SimpleDateFormat(
            "yyyy-MM-dd HH:mm:ss",
            java.util.Locale.getDefault()
        ).format(java.util.Date(data.timestamp))
        
        return """
            üö® NAVIYA EMERGENCY ALERT üö®
            
            ${data.message}
            
            Time: $timestamp
            $locationText
            
            This is an automated emergency notification from Naviya Launcher.
            Please respond immediately.
        """.trimIndent()
    }
    
    /**
     * Get localized emergency message
     */
    private fun getEmergencyMessage(type: EmergencyType, language: String): String {
        return when (language) {
            "de" -> when (type) {
                EmergencyType.SOS_ACTIVATED -> "NOTFALL: Ihr Angeh√∂riger ben√∂tigt Hilfe!"
                EmergencyType.FALL_DETECTED -> "STURZ ERKANNT: Ihr Angeh√∂riger ist m√∂glicherweise gest√ºrzt!"
                EmergencyType.MEDICAL_EMERGENCY -> "MEDIZINISCHER NOTFALL: Sofortige Hilfe erforderlich!"
                EmergencyType.PANIC_BUTTON -> "PANIK-TASTE: Ihr Angeh√∂riger hat den Notknopf gedr√ºckt!"
            }
            "tr" -> when (type) {
                EmergencyType.SOS_ACTIVATED -> "ACƒ∞L DURUM: Yakƒ±nƒ±nƒ±z yardƒ±ma ihtiya√ß duyuyor!"
                EmergencyType.FALL_DETECTED -> "D√ú≈ûME TESPƒ∞T EDƒ∞LDƒ∞: Yakƒ±nƒ±nƒ±z d√º≈üm√º≈ü olabilir!"
                EmergencyType.MEDICAL_EMERGENCY -> "TIBBƒ∞ ACƒ∞L DURUM: Acil yardƒ±m gerekli!"
                EmergencyType.PANIC_BUTTON -> "PANƒ∞K BUTONU: Yakƒ±nƒ±nƒ±z acil durum butonuna bastƒ±!"
            }
            "uk" -> when (type) {
                EmergencyType.SOS_ACTIVATED -> "–ù–ê–î–ó–í–ò–ß–ê–ô–ù–ê –°–ò–¢–£–ê–¶–Ü–Ø: –í–∞—à –±–ª–∏–∑—å–∫–∏–π –ø–æ—Ç—Ä–µ–±—É—î –¥–æ–ø–æ–º–æ–≥–∏!"
                EmergencyType.FALL_DETECTED -> "–í–ò–Ø–í–õ–ï–ù–û –ü–ê–î–Ü–ù–ù–Ø: –í–∞—à –±–ª–∏–∑—å–∫–∏–π –º–æ–∂–ª–∏–≤–æ –≤–ø–∞–≤!"
                EmergencyType.MEDICAL_EMERGENCY -> "–ú–ï–î–ò–ß–ù–ê –ù–ê–î–ó–í–ò–ß–ê–ô–ù–ê –°–ò–¢–£–ê–¶–Ü–Ø: –ü–æ—Ç—Ä—ñ–±–Ω–∞ –Ω–µ–≥–∞–π–Ω–∞ –¥–æ–ø–æ–º–æ–≥–∞!"
                EmergencyType.PANIC_BUTTON -> "–ö–ù–û–ü–ö–ê –ü–ê–ù–Ü–ö–ò: –í–∞—à –±–ª–∏–∑—å–∫–∏–π –Ω–∞—Ç–∏—Å–Ω—É–≤ –∫–Ω–æ–ø–∫—É –µ–∫—Å—Ç—Ä–µ–Ω–æ–≥–æ –≤–∏–∫–ª–∏–∫—É!"
            }
            "ar" -> when (type) {
                EmergencyType.SOS_ACTIVATED -> "ÿ≠ÿßŸÑÿ© ÿ∑Ÿàÿßÿ±ÿ¶: ŸÇÿ±Ÿäÿ®ŸÉ Ÿäÿ≠ÿ™ÿßÿ¨ ÿßŸÑŸÖÿ≥ÿßÿπÿØÿ©!"
                EmergencyType.FALL_DETECTED -> "ÿ™ŸÖ ÿßŸÉÿ™ÿ¥ÿßŸÅ ÿ≥ŸÇŸàÿ∑: ŸÇÿØ ŸäŸÉŸàŸÜ ŸÇÿ±Ÿäÿ®ŸÉ ŸÇÿØ ÿ≥ŸÇÿ∑!"
                EmergencyType.MEDICAL_EMERGENCY -> "ÿ≠ÿßŸÑÿ© ÿ∑Ÿàÿßÿ±ÿ¶ ÿ∑ÿ®Ÿäÿ©: ŸÖÿ∑ŸÑŸàÿ® ŸÖÿ≥ÿßÿπÿØÿ© ŸÅŸàÿ±Ÿäÿ©!"
                EmergencyType.PANIC_BUTTON -> "ÿ≤ÿ± ÿßŸÑÿ∞ÿπÿ±: ŸÇÿ±Ÿäÿ®ŸÉ ÿ∂ÿ∫ÿ∑ ÿπŸÑŸâ ÿ≤ÿ± ÿßŸÑÿ∑Ÿàÿßÿ±ÿ¶!"
            }
            else -> when (type) { // English default
                EmergencyType.SOS_ACTIVATED -> "EMERGENCY: Your loved one needs help!"
                EmergencyType.FALL_DETECTED -> "FALL DETECTED: Your loved one may have fallen!"
                EmergencyType.MEDICAL_EMERGENCY -> "MEDICAL EMERGENCY: Immediate help required!"
                EmergencyType.PANIC_BUTTON -> "PANIC BUTTON: Your loved one pressed the emergency button!"
            }
        }
    }
    
    /**
     * Check if caregiver notifications are properly configured
     */
    suspend fun isCaregiverNotificationReady(): Boolean {
        val caregiver = emergencyDao.getPrimaryCaregiver()
        return caregiver != null && caregiver.phoneNumber.isNotBlank()
    }
    
    /**
     * Send periodic status update to caregiver (if enabled)
     */
    suspend fun sendStatusUpdate(statusMessage: String, userLanguage: String) {
        try {
            val caregiver = emergencyDao.getPrimaryCaregiver() ?: return
            
            val message = "Naviya Status Update: $statusMessage"
            
            val smsManager = android.telephony.SmsManager.getDefault()
            smsManager.sendTextMessage(
                caregiver.phoneNumber,
                null,
                message,
                null,
                null
            )
            
            Log.i(TAG, "Status update sent to caregiver")
            
        } catch (e: Exception) {
            Log.e(TAG, "Failed to send status update", e)
        }
    }
}

/**
 * Emergency notification data structure
 */
data class EmergencyNotificationData(
    val caregiverId: String,
    val emergencyType: EmergencyType,
    val timestamp: Long,
    val userLanguage: String,
    val location: LocationData?,
    val message: String,
    val priority: NotificationPriority
)

/**
 * Location data for notifications
 */
data class LocationData(
    val latitude: Double,
    val longitude: Double,
    val accuracy: Float?,
    val timestamp: Long
)

/**
 * Emergency types for notifications
 */
enum class EmergencyType {
    SOS_ACTIVATED,
    FALL_DETECTED,
    MEDICAL_EMERGENCY,
    PANIC_BUTTON
}

/**
 * Notification priority levels
 */
enum class NotificationPriority {
    LOW,
    NORMAL,
    HIGH,
    CRITICAL
}
